const { ethers } = require('ethers');

// Configura√ß√µes para teste
const API_BASE_URL = 'http://localhost:3001';
const WALLET_ADDRESS = '0x6B509c04e3caA2207b8f2A60A067a8ddED03b8d0'; // Endere√ßo da sua wallet
const RPC_URL = 'https://api.avax.network/ext/bc/C/rpc';

// Endere√ßos de tokens comuns na Avalanche
const TOKENS = {
  WAVAX: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
  USDC: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E',
  USDT: '0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7',
  JOE: '0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd'
};

class APITester {
  constructor() {
    this.walletAddress = WALLET_ADDRESS;
    this.provider = new ethers.JsonRpcProvider(RPC_URL);
  }

  /**
   * Cria uma requisi√ß√£o autenticada
   */
  createAuthenticatedRequest(data = {}) {
    const timestamp = Date.now();
    const message = `timestamp:${timestamp}`;
    
    return {
      address: this.walletAddress,
      signature: '', // Ser√° preenchido ap√≥s assinatura
      message: message,
      timestamp: timestamp,
      ...data
    };
  }

  /**
   * Simula assinatura de uma requisi√ß√£o (em produ√ß√£o, isso viria do frontend)
   */
  async signRequest(requestBody) {
    const message = requestBody.message;
    // Em produ√ß√£o, a assinatura viria do smart wallet do frontend
    // Aqui simulamos apenas para teste
    const signature = '0x' + '1'.repeat(130); // Assinatura simulada
    return { ...requestBody, signature };
  }

  /**
   * Faz uma requisi√ß√£o HTTP
   */
  async makeRequest(endpoint, method = 'GET', body = null) {
    const url = `${API_BASE_URL}${endpoint}`;
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    if (body) {
      options.body = JSON.stringify(body);
    }

    try {
      const response = await fetch(url, options);
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${data.error || 'Erro desconhecido'}`);
      }
      
      return data;
    } catch (error) {
      console.error(`‚ùå Erro na requisi√ß√£o para ${endpoint}:`, error.message);
      throw error;
    }
  }

  /**
   * Testa endpoints b√°sicos da API
   */
  async testBasicEndpoints() {
    console.log('üß™ Testando endpoints b√°sicos...\n');

    try {
      // Health check
      const health = await this.makeRequest('/health');
      console.log('‚úÖ Health Check:', health.status);

      // API Info
      const info = await this.makeRequest('/info');
      console.log('‚úÖ API Info:', info.name, 'v' + info.version);

      // Network Status
      const networkStatus = await this.makeRequest('/network/status');
      console.log('‚úÖ Network Status:', networkStatus.network.name);

      // Configuration
      const config = await this.makeRequest('/config');
      console.log('‚úÖ Configuration:', config.network.chainId);

    } catch (error) {
      console.error('‚ùå Erro nos endpoints b√°sicos:', error.message);
    }
  }

  /**
   * Testa endpoints de pre√ßos
   */
  async testPriceEndpoints() {
    console.log('\nüí∞ Testando endpoints de pre√ßos...\n');

    try {
      // Pre√ßos comuns da Avalanche
      const commonPrices = await this.makeRequest('/price/avalanche/common');
      console.log('‚úÖ Pre√ßos comuns:', Object.keys(commonPrices.data).length, 'tokens');

      // Pre√ßo do Bitcoin
      const bitcoinPrice = await this.makeRequest('/price/coingecko/bitcoin');
      console.log('‚úÖ Pre√ßo Bitcoin:', `$${bitcoinPrice.data.price}`);

      // Tend√™ncias de mercado
      const trends = await this.makeRequest('/price/trending');
      console.log('‚úÖ Tend√™ncias:', trends.data.trendingCoins.length, 'tokens');

      // Estat√≠sticas globais
      const globalStats = await this.makeRequest('/price/global');
      console.log('‚úÖ Estat√≠sticas globais:', `$${globalStats.data.totalMarketCap.usd}`);

    } catch (error) {
      console.error('‚ùå Erro nos endpoints de pre√ßos:', error.message);
    }
  }

  /**
   * Testa endpoints de swap (requer autentica√ß√£o)
   */
  async testSwapEndpoints() {
    console.log('\nüîÑ Testando endpoints de swap...\n');

    try {
      // Lista tokens comuns
      const commonTokens = await this.makeRequest('/swap/tokens/common');
      console.log('‚úÖ Tokens comuns:', commonTokens.tokens.length, 'tokens');

      // Op√ß√µes de slippage
      const slippageOptions = await this.makeRequest('/swap/slippage/options');
      console.log('‚úÖ Op√ß√µes de slippage:', Object.keys(slippageOptions.options).length, 'op√ß√µes');

      // Testa cota√ß√£o (requer autentica√ß√£o)
      const quoteRequest = this.createAuthenticatedRequest({
        tokenIn: TOKENS.WAVAX,
        tokenOut: TOKENS.USDC,
        amountIn: '1000000000000000000', // 1 AVAX
        slippage: 1.0
      });

      const signedQuoteRequest = await this.signRequest(quoteRequest);
      const quote = await this.makeRequest('/swap/quote', 'POST', signedQuoteRequest);
      console.log('‚úÖ Cota√ß√£o obtida para Trader Joe');

    } catch (error) {
      console.error('‚ùå Erro nos endpoints de swap:', error.message);
    }
  }

  /**
   * Testa compara√ß√£o de pre√ßos
   */
  async testPriceComparison() {
    console.log('\nüèÜ Testando compara√ß√£o de pre√ßos...\n');

    try {
      const compareRequest = this.createAuthenticatedRequest({
        tokenIn: TOKENS.WAVAX,
        tokenOut: TOKENS.USDC,
        amountIn: '1000000000000000000' // 1 AVAX
      });

      const signedCompareRequest = await this.signRequest(compareRequest);
      const comparison = await this.makeRequest('/swap/price/compare', 'POST', signedCompareRequest);
      
      console.log('‚úÖ Pre√ßo obtido:');
      console.log(`   Protocolo: ${comparison.protocol}`);
      console.log(`   Amount Out: ${comparison.data.amountOut}`);
      console.log(`   Note: ${comparison.note}`);

    } catch (error) {
      console.error('‚ùå Erro na compara√ß√£o de pre√ßos:', error.message);
    }
  }

  /**
   * Testa informa√ß√µes de tokens
   */
  async testTokenInfo() {
    console.log('\nü™ô Testando informa√ß√µes de tokens...\n');

    try {
      // Informa√ß√µes do AVAX
      const avaxInfo = await this.makeRequest(`/price/token/avalanche-2`);
      console.log('‚úÖ Informa√ß√µes AVAX:', avaxInfo.data.symbol, '-', avaxInfo.data.name);

      // Hist√≥rico de pre√ßos do Bitcoin
      const btcHistory = await this.makeRequest('/price/history/bitcoin?days=1');
      console.log('‚úÖ Hist√≥rico Bitcoin:', btcHistory.data.prices.length, 'pontos de dados');

    } catch (error) {
      console.error('‚ùå Erro nas informa√ß√µes de tokens:', error.message);
    }
  }

  /**
   * Executa todos os testes
   */
  async runAllTests() {
    console.log('üöÄ Iniciando testes da Zico Swap API\n');
    console.log(`üìç API: ${API_BASE_URL}`);
    console.log(`üîó Rede: Avalanche C-Chain`);
    console.log(`üëõ Wallet: ${this.walletAddress}\n`);

    try {
      await this.testBasicEndpoints();
      await this.testPriceEndpoints();
      await this.testSwapEndpoints();
      await this.testPriceComparison();
      await this.testTokenInfo();

      console.log('\nüéâ Todos os testes foram executados!');
      console.log('\nüí° Para executar swaps reais, use os endpoints de execu√ß√£o com transa√ß√µes assinadas pelo frontend.');

    } catch (error) {
      console.error('\nüí• Erro durante os testes:', error.message);
    }
  }
}

// Fun√ß√£o principal
async function main() {
  // Verifica se o fetch est√° dispon√≠vel (Node.js 18+)
  if (typeof fetch === 'undefined') {
    console.log('üì¶ Instalando node-fetch...');
    const { default: fetch } = await import('node-fetch');
    global.fetch = fetch;
  }

  const tester = new APITester();
  await tester.runAllTests();
}

// Executa os testes se o arquivo for executado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = APITester;
